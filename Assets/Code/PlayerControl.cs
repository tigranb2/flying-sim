using System.Drawing;
using System.Net.Sockets;
using UnityEngine;
using UnityEngine.SocialPlatforms.Impl;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour {
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 20f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;

    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;


    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw = 0;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;
#endregion

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start() {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward*3;
    }

    /// <summary>
    /// Update rotataion and thrust
    /// </summary>
    void FixedUpdate()
    {
        // Rotation
        float inputRoll = Input.GetAxis("Horizontal") * RollRange;
        float inputPitch = Input.GetAxis("Vertical") * PitchRange;

        roll = Mathf.Lerp(roll, inputRoll, 0.01f);
        pitch = Mathf.Lerp(pitch, inputPitch, 0.01f);
        yaw -= roll * RotationalSpeed * Time.fixedDeltaTime;

        Quaternion rotationQuaternion = Quaternion.Euler(pitch, yaw, roll);
        playerRB.MoveRotation(rotationQuaternion);


        // Thrust
        thrust = Input.GetAxis("Thrust") * MaximumThrust;
        if (thrust < 0)
        {
            thrust = 0;
        }
        playerRB.AddForce(thrust*playerRB.transform.forward);

        // Aerodynamics TODO : set radius
        Collider[] updrafts = Physics.OverlapSphere(playerRB.transform.position, 0.5f, LayerMask.GetMask("Updrafts"));
        Vector3 updraftV = new Vector3(0, 0, 0);
        foreach (var updraft in updrafts)
        {
            updraftV += updraft.GetComponent<Updraft>().WindVelocity;
        }
        float airVf = Vector3.Dot(updraftV - playerRB.velocity, transform.forward);
        float airVup = Vector3.Dot(updraftV - playerRB.velocity, transform.up);


        // Lift
        Vector3 liftForce = LiftCoefficient * (airVf * airVf) * transform.up;
        playerRB.AddForce(liftForce);

        // Drag
        Vector3 forwardDrag = ForwardDragCoefficient * (airVf * airVf) * transform.forward;
        if (airVf < 0)
        {
            forwardDrag *= -1;
        }
        Vector3 verticalDrag = VerticalDragCoefficient * (airVup * airVup) * transform.up;
        if (airVup < 0)
        {
            verticalDrag *= -1;
        }
        playerRB.AddForce(forwardDrag);
        playerRB.AddForce(verticalDrag);
    }

    /// <summary>
    /// Called when plane collides with something; calls OnGameOver method
    /// Game is lost if plane was moving too fast; game is won otherwise
    /// </summary>
    /// <param name="collision"></param>
    void OnCollisionEnter(Collision collision)
    {
        LandingPlatform landingPlatform = collision.collider.GetComponent<LandingPlatform>();
        // collided with landing platform with appropriate speed

        if (landingPlatform != null && playerRB.velocity.z < landingPlatform.MaxLandingSpeed)
        {
            OnGameOver(true);
            return;
        }
        OnGameOver(false);
    }


    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe) {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe) {
            GameOverText.text = "You Win!";
        } else {
            GameOverText.text = "OOPS";
        }
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }
}
